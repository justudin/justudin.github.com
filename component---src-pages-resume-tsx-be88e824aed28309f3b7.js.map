{"version":3,"sources":["webpack:///./src/components/Experience/index.js","webpack:///./src/components/ui/Timeline/styles.js","webpack:///./src/components/ui/Timeline/index.js","webpack:///./src/components/ui/ProgressBar/styles.js","webpack:///./src/components/ui/ProgressBar/index.js","webpack:///./src/components/Skills/styles.js","webpack:///./src/components/Skills/index.js","webpack:///./src/pages/resume.tsx","webpack:///./src/components/utils/FormatHtml/index.js","webpack:///./src/components/Education/index.js"],"names":["Experience","markdownRemark","allMarkdownRemark","sectionTitle","frontmatter","experiences","edges","section","subtitle","map","item","node","id","html","company","position","startDate","endDate","key","title","content","Timeline","styled","div","Details","Content","Title","Subtitle","Date","Point","span","ProgressBar","BarWrapper","Bar","percentage","h3","Percentage","Skills","Skill","skills","Container","TitleSection","center","ResumePage","Layout","SEO","Education","FormatHtml","className","dangerouslySetInnerHTML","__html","education","university","degree"],"mappings":"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","file":"component---src-pages-resume-tsx-be88e824aed28309f3b7.js","sourcesContent":["import React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\n\r\nimport Timeline from 'components/ui/Timeline';\r\nimport Container from 'components/ui/Container';\r\nimport TitleSection from 'components/ui/TitleSection';\r\nimport FormatHtml from 'components/utils/FormatHtml';\r\n\r\nconst Experience = () => {\r\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\r\n    query {\r\n      markdownRemark(frontmatter: { category: { eq: \"experiences section\" } }) {\r\n        frontmatter {\r\n          title\r\n          subtitle\r\n        }\r\n      }\r\n      allMarkdownRemark(\r\n        filter: { frontmatter: { category: { eq: \"experiences\" } } }\r\n        sort: { order: DESC, fields: frontmatter___order }\r\n      ) {\r\n        edges {\r\n          node {\r\n            id\r\n            html\r\n            frontmatter {\r\n              company\r\n              position\r\n              startDate\r\n              endDate\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const sectionTitle = markdownRemark.frontmatter;\r\n  const experiences = allMarkdownRemark.edges;\r\n\r\n  return (\r\n    <Container section>\r\n      <TitleSection subtitle={sectionTitle.subtitle} />\r\n\r\n      {experiences.map((item) => {\r\n        const {\r\n          id,\r\n          html,\r\n          frontmatter: { company, position, startDate, endDate }\r\n        } = item.node;\r\n\r\n        return (\r\n          <Timeline\r\n            key={id}\r\n            title={position}\r\n            subtitle={company}\r\n            content={<FormatHtml content={html} />}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n","import styled from 'styled-components';\r\nimport tw from 'tailwind.macro';\r\n\r\nexport const Timeline = styled.div`\r\n  ${tw`flex flex-col sm:flex-row w-full p-4 relative border-l border-indigo-200`};\r\n\r\n  &:last-child {\r\n    ${tw`pb-0`};\r\n  }\r\n`;\r\n\r\nexport const Details = styled.div`\r\n  ${tw`w-full sm:w-1/3`};\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  ${tw`w-full sm:w-2/3 mt-4 sm:mt-0 text-xs`};\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  ${tw`mt-3`};\r\n`;\r\n\r\nexport const Subtitle = styled.div`\r\n  ${tw`text-xs`};\r\n`;\r\n\r\nexport const Date = styled.div`\r\n  ${tw`text-xs`};\r\n  width: fit-content;\r\n`;\r\n\r\nexport const Point = styled.span`\r\n  ${tw`w-3 h-3 border border-blue-700 bg-blue-600 rounded-full absolute`};\r\n  left: -6px;\r\n  top: 20px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as Styled from './styles';\r\n\r\nconst Timeline = ({ title, subtitle, content, startDate, endDate }) => (\r\n  <Styled.Timeline>\r\n    <Styled.Point />\r\n    <Styled.Details>\r\n      <Styled.Date>\r\n        {startDate} - {endDate}\r\n      </Styled.Date>\r\n      <Styled.Title>{title}</Styled.Title>\r\n      <Styled.Subtitle>{subtitle}</Styled.Subtitle>\r\n    </Styled.Details>\r\n    <Styled.Content>{content}</Styled.Content>\r\n  </Styled.Timeline>\r\n);\r\n\r\nTimeline.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  subtitle: PropTypes.string.isRequired,\r\n  content: PropTypes.any.isRequired,\r\n  startDate: PropTypes.string.isRequired,\r\n  endDate: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Timeline;\r\n","import styled from 'styled-components';\r\nimport tw from 'tailwind.macro';\r\n\r\nexport const ProgressBar = styled.div`\r\n  ${tw`p-3`};\r\n`;\r\n\r\nexport const BarWrapper = styled.div`\r\n  ${tw`w-full h-2 bg-gray-300 rounded overflow-hidden mt-1`};\r\n`;\r\n\r\nexport const Bar = styled.div`\r\n  ${tw`h-2 bg-blue-700`};\r\n  width: ${({ percentage }) => `${percentage}%`};\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  ${tw`w-full flex justify-between`};\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n  ${tw`font-semibold`};\r\n`;\r\n\r\nexport const Percentage = styled.h3`\r\n  ${tw`font-semibold`};\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as Styled from './styles';\r\n\r\nconst ProgressBar = ({ title, percentage }) => (\r\n  <Styled.ProgressBar>\r\n    <Styled.Content>\r\n      <Styled.Title>{title}</Styled.Title>\r\n      <Styled.Percentage>{percentage}%</Styled.Percentage>\r\n    </Styled.Content>\r\n    <Styled.BarWrapper>\r\n      <Styled.Bar percentage={percentage} />\r\n    </Styled.BarWrapper>\r\n  </Styled.ProgressBar>\r\n);\r\n\r\nProgressBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  percentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ProgressBar;\r\n","import styled from 'styled-components';\r\nimport tw from 'tailwind.macro';\r\n\r\nexport const Skills = styled.div`\r\n  ${tw`flex flex-wrap w-full`};\r\n`;\r\n\r\nexport const Skill = styled.div`\r\n  ${tw`w-full sm:w-1/2`};\r\n`;\r\n","import React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\n\r\nimport Container from 'components/ui/Container';\r\nimport TitleSection from 'components/ui/TitleSection';\r\nimport ProgressBar from 'components/ui/ProgressBar';\r\n\r\nimport * as Styled from './styles';\r\n\r\nconst Skills = () => {\r\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\r\n    query {\r\n      markdownRemark(frontmatter: { category: { eq: \"skills section\" } }) {\r\n        frontmatter {\r\n          title\r\n          subtitle\r\n        }\r\n      }\r\n      allMarkdownRemark(filter: { frontmatter: { category: { eq: \"skills\" } } }, sort: { fields: fileAbsolutePath }) {\r\n        edges {\r\n          node {\r\n            id\r\n            frontmatter {\r\n              title\r\n              percentage\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const sectionTitle = markdownRemark.frontmatter;\r\n  const skills = allMarkdownRemark.edges;\r\n\r\n  return (\r\n    <Container section>\r\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} center />\r\n      <Styled.Skills>\r\n        {skills.map((item) => {\r\n          const {\r\n            id,\r\n            frontmatter: { title, percentage }\r\n          } = item.node;\r\n\r\n          return (\r\n            <Styled.Skill key={id}>\r\n              <ProgressBar title={title} percentage={percentage} />\r\n            </Styled.Skill>\r\n          );\r\n        })}\r\n      </Styled.Skills>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","import React from 'react';\r\n\r\nimport Layout from 'components/Layout';\r\nimport SEO from 'components/SEO';\r\nimport Experience from 'components/Experience';\r\nimport Education from 'components/Education';\r\nimport Skills from 'components/Skills';\r\n\r\nconst ResumePage: React.FC = () => (\r\n  <Layout>\r\n    <SEO title=\"Resume\" />\r\n    <Experience />\r\n    <hr />\r\n    <Education />\r\n    <hr />\r\n    <Skills />\r\n  </Layout>\r\n);\r\n\r\nexport default ResumePage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst FormatHtml = ({ content }) => (\r\n  <span\r\n    className=\"format-html\"\r\n    dangerouslySetInnerHTML={{\r\n      __html: content\r\n    }}\r\n  />\r\n);\r\n\r\nFormatHtml.propTypes = {\r\n  content: PropTypes.any.isRequired\r\n};\r\n\r\nexport default FormatHtml;\r\n","import React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\n\r\nimport Timeline from 'components/ui/Timeline';\r\nimport Container from 'components/ui/Container';\r\nimport TitleSection from 'components/ui/TitleSection';\r\nimport FormatHtml from 'components/utils/FormatHtml';\r\n\r\nconst Education = () => {\r\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\r\n    query {\r\n      markdownRemark(frontmatter: { category: { eq: \"education section\" } }) {\r\n        frontmatter {\r\n          title\r\n          subtitle\r\n        }\r\n      }\r\n      allMarkdownRemark(\r\n        filter: { frontmatter: { category: { eq: \"education\" } } }\r\n        sort: { order: DESC, fields: frontmatter___order }\r\n      ) {\r\n        edges {\r\n          node {\r\n            id\r\n            html\r\n            frontmatter {\r\n              university\r\n              degree\r\n              startDate\r\n              endDate\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const sectionTitle = markdownRemark.frontmatter;\r\n  const education = allMarkdownRemark.edges;\r\n\r\n  return (\r\n    <Container section>\r\n      <TitleSection subtitle={sectionTitle.subtitle} />\r\n\r\n      {education.map((item) => {\r\n        const {\r\n          id,\r\n          html,\r\n          frontmatter: { university, degree, startDate, endDate }\r\n        } = item.node;\r\n\r\n        return (\r\n          <Timeline\r\n            key={id}\r\n            title={degree}\r\n            subtitle={university}\r\n            content={<FormatHtml content={html} />}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n        );\r\n      })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Education;\r\n"],"sourceRoot":""}